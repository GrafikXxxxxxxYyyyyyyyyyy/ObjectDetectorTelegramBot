import os
import torch
import asyncio
import random
from datetime import datetime
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes,
    CallbackQueryHandler,
)
from transformers import (
    AutoImageProcessor, 
    DFineForObjectDetection,
    AutoModelForObjectDetection,
)
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
from ultralytics import YOLO


# üîß –ú–æ–¥–µ–ª–∏
DETECTOR_MODELS = {
    "detr": {
        "name": "DETR ResNet-101",
        "desc": "üéØ DETR (ResNet-101) ‚Äî –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç Facebook –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—â–µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.",
        "processor": AutoImageProcessor.from_pretrained("facebook/detr-resnet-101"),
        "model": AutoModelForObjectDetection.from_pretrained("facebook/detr-resnet-101").to('mps')
    },
    "yolo": {
        "name": "YOLOv8 Nano",
        "desc": "‚ö° YOLOv8n ‚Äî –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.",
        "model": YOLO('yolov8n.pt').to('mps')  # YOLO –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç processor
    },
    "dfine": {
        "name": "DFine XLarge",
        "desc": "üî¨ DFine XLarge ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç–æ–Ω–∫–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω.",
        "processor": AutoImageProcessor.from_pretrained("ustc-community/dfine-xlarge-obj365"),
        "model": DFineForObjectDetection.from_pretrained("ustc-community/dfine-xlarge-obj365").to('mps')
    }
}



def detect_and_draw_boxes(image: Image.Image, model_key: str) -> tuple[Image.Image, str]:
    found_objects = []
    draw = ImageDraw.Draw(image)
    font = ImageFont.load_default()

    if model_key == "yolo":
        results = DETECTOR_MODELS["yolo"]["model"](image)
        for r in results:
            boxes = r.boxes
            for box in boxes:
                cls = int(box.cls[0])
                score = float(box.conf[0])
                label = DETECTOR_MODELS["yolo"]["model"].names[cls]
                x0, y0, x1, y1 = box.xyxy[0].tolist()
                text = f"{label} ({score:.2f})"
                found_objects.append(text)
                draw.rectangle([x0, y0, x1, y1], outline="green", width=2)
                draw.text((x0 + 3, y0 + 3), text, fill="green", font=font)

    else:
        processor = DETECTOR_MODELS[model_key]["processor"]
        model = DETECTOR_MODELS[model_key]["model"]
        inputs = processor(images=image, return_tensors="pt").to("mps")
        outputs = model(**inputs)
        target_sizes = torch.tensor([image.size[::-1]]).to("mps")
        results = processor.post_process_object_detection(outputs, target_sizes=target_sizes, threshold=0.7)[0]

        for score, label, box in zip(results["scores"], results["labels"], results["boxes"]):
            box = [round(i, 3) for i in box.tolist()]
            x0, y0, x1, y1 = box
            class_name = model.config.id2label[label.item()]
            text = f"{class_name} ({score:.2f})"
            found_objects.append(text)
            draw.rectangle([x0, y0, x1, y1], outline="red", width=2)
            draw.text((x0 + 3, y0 + 3), text, fill="red", font=font)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    if found_objects:
        object_list_text = "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:\n" + "\n".join(f"‚Ä¢ {obj}" for obj in found_objects)
    else:
        object_list_text = "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî"

    return image, object_list_text



# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [["Detect objects"], ["Change detector model"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤.", reply_markup=reply_markup)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
async def detect_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    if text == "Detect objects":
        context.user_data["awaiting_image"] = True
        await update.message.reply_text("–û–∫–µ–π, –∂–¥—É –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üì∑")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
async def change_model_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("DETR ResNet-101", callback_data="set_model_detr")],
        [InlineKeyboardButton("YOLOv8 Nano", callback_data="set_model_yolo")],
        [InlineKeyboardButton("DFine XLarge", callback_data="set_model_dfine")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    description_text = "\n\n".join([f"*{v['name']}*\n{v['desc']}" for v in DETECTOR_MODELS.values()])
    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤:\n\n{description_text}",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def set_model_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    model_key = query.data.replace("set_model_", "")
    context.user_data["current_model"] = model_key

    model_name = DETECTOR_MODELS[model_key]["name"]
    await query.edit_message_text(f"‚úÖ –ú–æ–¥–µ–ª—å *{model_name}* –≤—ã–±—Ä–∞–Ω–∞.", parse_mode="Markdown")




##########################################################################################
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
##########################################################################################
async def image_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.user_data.get("awaiting_image", False):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîç –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã'.")
        return

    context.user_data["awaiting_image"] = False  # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é üß†...")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    photo = update.message.photo[-1] # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é (–ø–æ —Ä–∞–∑–º–µ—Ä—É) –≤–µ—Ä—Å–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    file = await context.bot.get_file(photo.file_id)  
    photo_bytes = await file.download_as_bytearray() # –ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤ –≤–∏–¥–µ –±–∏—Ç–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    image = Image.open(BytesIO(photo_bytes)).convert("RGB") # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ PIL

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    model_key = context.user_data.get("current_model", "detr")
    result_image, detected_text = detect_and_draw_boxes(image, model_key)

    # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    buffer = BytesIO()
    result_image.save(buffer, format="JPEG", quality=100, subsampling=0)
    buffer.seek(0)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    os.makedirs("photos", exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"photos/result_{timestamp}.jpg"
    result_image.save(filename, format="JPEG", quality=100, subsampling=0)
    
    await update.message.reply_photo(photo=buffer, caption=detected_text)
##########################################################################################



def main():
    # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
    TOKEN = "8296197576:AAGRlQqDeNbGF1rWY8f8SXFIONubN4EIycQ"

    # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    app = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    app.add_handler(CommandHandler("start", start))
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^Detect objects$"), detect_button_handler))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^Change detector model$"), change_model_handler))
    app.add_handler(CallbackQueryHandler(set_model_callback, pattern=r"^set_model_"))
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    app.add_handler(MessageHandler(filters.PHOTO, image_handler))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()



if __name__ == "__main__":
    main()

